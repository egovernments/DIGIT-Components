[{"/home/hridya/DIGIT-UI-LIBRARIES/react/example/src/index.js":"1","/home/hridya/DIGIT-UI-LIBRARIES/react/example/src/App.js":"2","/home/hridya/DIGIT-UI-LIBRARIES/react/example/src/UICustomizations.js":"3","/home/hridya/Downloads/DIGIT-UI-LIBRARIES/react/example/src/index.js":"4","/home/hridya/Downloads/DIGIT-UI-LIBRARIES/react/example/src/App.js":"5","/home/hridya/Downloads/DIGIT-UI-LIBRARIES/react/example/src/UICustomizations.js":"6"},{"size":1759,"mtime":1711455656130,"results":"7","hashOfConfig":"8"},{"size":2960,"mtime":1711455656130,"results":"9","hashOfConfig":"8"},{"size":23463,"mtime":1711455656130,"results":"10","hashOfConfig":"8"},{"size":1759,"mtime":1712739664466,"results":"11","hashOfConfig":"12"},{"size":2960,"mtime":1712739664466,"results":"13","hashOfConfig":"12"},{"size":23463,"mtime":1712739664466,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5pkp7b",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ir5t1m",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"/home/hridya/DIGIT-UI-LIBRARIES/react/example/src/index.js",[],"/home/hridya/DIGIT-UI-LIBRARIES/react/example/src/App.js",[],"/home/hridya/DIGIT-UI-LIBRARIES/react/example/src/UICustomizations.js",["28","29","30"],"import { Link } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport { Amount} from \"@egovernments/digit-ui-components\";\n\n\n//create functions here based on module name set in mdms(eg->SearchProjectConfig)\n//how to call these -> Digit?.Customizations?.[masterName]?.[moduleName]\n// these functions will act as middlewares\nvar Digit = window.Digit || {};\n\nconst businessServiceMap = {\n  \"muster roll\": \"MR\",\n};\n\nconst inboxModuleNameMap = {\n  \"muster-roll-approval\": \"muster-roll-service\",\n};\n\nexport const UICustomizations = {\n  businessServiceMap,\n  updatePayload: (applicationDetails, data, action, businessService) => {\n    if (businessService === businessServiceMap.estimate) {\n      const workflow = {\n        comment: data.comments,\n        documents: data?.documents?.map((document) => {\n          return {\n            documentType: action?.action + \" DOC\",\n            fileName: document?.[1]?.file?.name,\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\n          };\n        }),\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\n        action: action.action,\n      };\n      //filtering out the data\n      Object.keys(workflow).forEach((key, index) => {\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\n      });\n\n      return {\n        estimate: applicationDetails,\n        workflow,\n      };\n    }\n    if (businessService === businessServiceMap.contract) {\n      const workflow = {\n        comment: data?.comments,\n        documents: data?.documents?.map((document) => {\n          return {\n            documentType: action?.action + \" DOC\",\n            fileName: document?.[1]?.file?.name,\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\n          };\n        }),\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\n        action: action.action,\n      };\n      //filtering out the data\n      Object.keys(workflow).forEach((key, index) => {\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\n      });\n\n      return {\n        contract: applicationDetails,\n        workflow,\n      };\n    }\n    if (businessService === businessServiceMap?.[\"muster roll\"]) {\n      const workflow = {\n        comment: data?.comments,\n        documents: data?.documents?.map((document) => {\n          return {\n            documentType: action?.action + \" DOC\",\n            fileName: document?.[1]?.file?.name,\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\n          };\n        }),\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\n        action: action.action,\n      };\n      //filtering out the data\n      Object.keys(workflow).forEach((key, index) => {\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\n      });\n\n      return {\n        musterRoll: applicationDetails,\n        workflow,\n      };\n    }\n    if (businessService === businessServiceMap?.[\"works.purchase\"]) {\n      const workflow = {\n        comment: data.comments,\n        documents: data?.documents?.map((document) => {\n          return {\n            documentType: action?.action + \" DOC\",\n            fileName: document?.[1]?.file?.name,\n            fileStoreId: document?.[1]?.fileStoreId?.fileStoreId,\n            documentUid: document?.[1]?.fileStoreId?.fileStoreId,\n            tenantId: document?.[1]?.fileStoreId?.tenantId,\n          };\n        }),\n        assignees: data?.assignees?.uuid ? [data?.assignees?.uuid] : null,\n        action: action.action,\n      };\n      //filtering out the data\n      Object.keys(workflow).forEach((key, index) => {\n        if (!workflow[key] || workflow[key]?.length === 0) delete workflow[key];\n      });\n\n      const additionalFieldsToSet = {\n        projectId: applicationDetails.additionalDetails.projectId,\n        invoiceDate: applicationDetails.billDate,\n        invoiceNumber: applicationDetails.referenceId.split(\"_\")?.[1],\n        contractNumber: applicationDetails.referenceId.split(\"_\")?.[0],\n        documents: applicationDetails.additionalDetails.documents,\n      };\n      return {\n        bill: { ...applicationDetails, ...additionalFieldsToSet },\n        workflow,\n      };\n    }\n  },\n  enableModalSubmit: (businessService, action, setModalSubmit, data) => {\n    if (businessService === businessServiceMap?.[\"muster roll\"] && action.action === \"APPROVE\") {\n      setModalSubmit(data?.acceptTerms);\n    }\n  },\n  enableHrmsSearch: (businessService, action) => {\n    if (businessService === businessServiceMap.estimate) {\n      return action.action.includes(\"TECHNICALSANCTION\") || action.action.includes(\"VERIFYANDFORWARD\");\n    }\n    if (businessService === businessServiceMap.contract) {\n      return action.action.includes(\"VERIFY_AND_FORWARD\");\n    }\n    if (businessService === businessServiceMap?.[\"muster roll\"]) {\n      return action.action.includes(\"VERIFY\");\n    }\n    if (businessService === businessServiceMap?.[\"works.purchase\"]) {\n      return action.action.includes(\"VERIFY_AND_FORWARD\");\n    }\n    return false;\n  },\n  getBusinessService: (moduleCode) => {\n    if (moduleCode?.includes(\"estimate\")) {\n      return businessServiceMap?.estimate;\n    } else if (moduleCode?.includes(\"contract\")) {\n      return businessServiceMap?.contract;\n    } else if (moduleCode?.includes(\"muster roll\")) {\n      return businessServiceMap?.[\"muster roll\"];\n    } else if (moduleCode?.includes(\"works.purchase\")) {\n      return businessServiceMap?.[\"works.purchase\"];\n    } else if (moduleCode?.includes(\"works.wages\")) {\n      return businessServiceMap?.[\"works.wages\"];\n    } else if (moduleCode?.includes(\"works.supervision\")) {\n      return businessServiceMap?.[\"works.supervision\"];\n    } else {\n      return businessServiceMap;\n    }\n  },\n  getInboxModuleName: (moduleCode) => {\n    if (moduleCode?.includes(\"estimate\")) {\n      return inboxModuleNameMap?.estimate;\n    } else if (moduleCode?.includes(\"contract\")) {\n      return inboxModuleNameMap?.contracts;\n    } else if (moduleCode?.includes(\"attendence\")) {\n      return inboxModuleNameMap?.attendencemgmt;\n    } else {\n      return inboxModuleNameMap;\n    }\n  },\n\n  AttendanceInboxConfig: {\n    preProcess: (data) => {\n      //set tenantId\n      data.body.inbox.tenantId = Digit.ULBService.getCurrentTenantId();\n      data.body.inbox.processSearchCriteria.tenantId = Digit.ULBService.getCurrentTenantId();\n\n      const musterRollNumber = data?.body?.inbox?.moduleSearchCriteria?.musterRollNumber?.trim();\n      if (musterRollNumber) data.body.inbox.moduleSearchCriteria.musterRollNumber = musterRollNumber;\n\n      const attendanceRegisterName = data?.body?.inbox?.moduleSearchCriteria?.attendanceRegisterName?.trim();\n      if (attendanceRegisterName) data.body.inbox.moduleSearchCriteria.attendanceRegisterName = attendanceRegisterName;\n\n      // deleting them for now(assignee-> need clarity from pintu,ward-> static for now,not implemented BE side)\n      const assignee = _.clone(data.body.inbox.moduleSearchCriteria.assignee);\n      delete data.body.inbox.moduleSearchCriteria.assignee;\n      if (assignee?.code === \"ASSIGNED_TO_ME\") {\n        data.body.inbox.moduleSearchCriteria.assignee = Digit.UserService.getUser().info.uuid;\n      }\n\n      //cloning locality and workflow states to format them\n      // let locality = _.clone(data.body.inbox.moduleSearchCriteria.locality ? data.body.inbox.moduleSearchCriteria.locality : []);\n\n      let selectedOrg = _.clone(data.body.inbox.moduleSearchCriteria.orgId ? data.body.inbox.moduleSearchCriteria.orgId : null);\n      delete data.body.inbox.moduleSearchCriteria.orgId;\n      if (selectedOrg) {\n        data.body.inbox.moduleSearchCriteria.orgId = selectedOrg?.[0]?.applicationNumber;\n      }\n\n      // let selectedWard =  _.clone(data.body.inbox.moduleSearchCriteria.ward ? data.body.inbox.moduleSearchCriteria.ward : null);\n      // delete data.body.inbox.moduleSearchCriteria.ward;\n      // if(selectedWard) {\n      //    data.body.inbox.moduleSearchCriteria.ward = selectedWard?.[0]?.code;\n      // }\n\n      let states = _.clone(data.body.inbox.moduleSearchCriteria.state ? data.body.inbox.moduleSearchCriteria.state : []);\n      let ward = _.clone(data.body.inbox.moduleSearchCriteria.ward ? data.body.inbox.moduleSearchCriteria.ward : []);\n      // delete data.body.inbox.moduleSearchCriteria.locality;\n      delete data.body.inbox.moduleSearchCriteria.state;\n      delete data.body.inbox.moduleSearchCriteria.ward;\n\n      // locality = locality?.map((row) => row?.code);\n      states = Object.keys(states)?.filter((key) => states[key]);\n      ward = ward?.map((row) => row?.code);\n\n      // //adding formatted data to these keys\n      // if (locality.length > 0) data.body.inbox.moduleSearchCriteria.locality = locality;\n      if (states.length > 0) data.body.inbox.moduleSearchCriteria.status = states;\n      if (ward.length > 0) data.body.inbox.moduleSearchCriteria.ward = ward;\n      const projectType = _.clone(data.body.inbox.moduleSearchCriteria.projectType ? data.body.inbox.moduleSearchCriteria.projectType : {});\n      if (projectType?.code) data.body.inbox.moduleSearchCriteria.projectType = projectType.code;\n\n      //adding tenantId to moduleSearchCriteria\n      data.body.inbox.moduleSearchCriteria.tenantId = Digit.ULBService.getCurrentTenantId();\n\n      //setting limit and offset becoz somehow they are not getting set in muster inbox\n      data.body.inbox.limit = data.state.tableForm.limit;\n      data.body.inbox.offset = data.state.tableForm.offset;\n      delete data.state;\n      return data;\n    },\n    postProcess: (responseArray, uiConfig) => {\n      const statusOptions = responseArray?.statusMap\n        ?.filter((item) => item.applicationstatus)\n        ?.map((item) => ({ code: item.applicationstatus, i18nKey: `COMMON_MASTERS_${item.applicationstatus}` }));\n      if (uiConfig?.type === \"filter\") {\n        let fieldConfig = uiConfig?.fields?.filter((item) => item.type === \"dropdown\" && item.populators.name === \"musterRollStatus\");\n        if (fieldConfig.length) {\n          fieldConfig[0].populators.options = statusOptions;\n        }\n      }\n    },\n    additionalCustomizations: (row, key, column, value, t, searchResult) => {\n      if (key === \"ATM_MUSTER_ROLL_ID\") {\n        return (\n          <span className=\"link\">\n            <Link\n              to={`/${\n                window.contextPath\n              }/employee/attendencemgmt/view-attendance?tenantId=${Digit.ULBService.getCurrentTenantId()}&musterRollNumber=${value}`}\n            >\n              {String(value ? (column.translate ? t(column.prefix ? `${column.prefix}${value}` : value) : value) : t(\"ES_COMMON_NA\"))}\n            </Link>\n          </span>\n        );\n      }\n      if (key === \"ATM_ATTENDANCE_WEEK\") {\n        const week = `${Digit.DateUtils.ConvertTimestampToDate(value?.startDate, \"dd/MM/yyyy\")}-${Digit.DateUtils.ConvertTimestampToDate(\n          value?.endDate,\n          \"dd/MM/yyyy\"\n        )}`;\n        return <div>{week}</div>;\n      }\n      if (key === \"ATM_NO_OF_INDIVIDUALS\") {\n        return <div>{value?.length}</div>;\n      }\n      if (key === \"ATM_AMOUNT_IN_RS\") {\n        return <span>{value ? Digit.Utils.dss.formatterWithoutRound(value, \"number\") : t(\"ES_COMMON_NA\")}</span>;\n      }\n      if (key === \"ATM_SLA\") {\n        return parseInt(value) > 0 ? (\n          <span className=\"sla-cell-success\">{t(value) || \"\"}</span>\n        ) : (\n          <span className=\"sla-cell-error\">{t(value) || \"\"}</span>\n        );\n      }\n      if (key === \"COMMON_WORKFLOW_STATES\") {\n        return <span>{t(`WF_MUSTOR_${value}`)}</span>;\n      }\n      //added this in case we change the key and not updated here , it'll throw that nothing was returned from cell error if that case is not handled here. To prevent that error putting this default\n      return <span>{t(`CASE_NOT_HANDLED`)}</span>;\n    },\n    MobileDetailsOnClick: (row, tenantId) => {\n      let link;\n      Object.keys(row).map((key) => {\n        if (key === \"ATM_MUSTER_ROLL_ID\")\n          link = `/${window.contextPath}/employee/attendencemgmt/view-attendance?tenantId=${tenantId}&musterRollNumber=${row[key]}`;\n      });\n      return link;\n    },\n    populateReqCriteria: () => {\n      const tenantId = Digit.ULBService.getCurrentTenantId();\n      return {\n        url: \"/org-services/organisation/v1/_search\",\n        params: { limit: 50, offset: 0 },\n        body: {\n          SearchCriteria: {\n            tenantId: tenantId,\n            functions: {\n              type: \"CBO\",\n            },\n          },\n        },\n        config: {\n          enabled: true,\n          select: (data) => {\n            return data?.organisations;\n          },\n        },\n      };\n    },\n  },\n  SearchWageSeekerConfig: {\n    customValidationCheck: (data) => {\n      //checking both to and from date are present\n      const { createdFrom, createdTo } = data;\n      if ((createdFrom === \"\" && createdTo !== \"\") || (createdFrom !== \"\" && createdTo === \"\"))\n        return { warning: true, label: \"ES_COMMON_ENTER_DATE_RANGE\" };\n\n      return false;\n    },\n    preProcess: (data) => {\n      data.params = { ...data.params, tenantId: Digit.ULBService.getCurrentTenantId() };\n\n      let requestBody = { ...data.body.Individual };\n      const pathConfig = {\n        name: \"name.givenName\",\n      };\n      const dateConfig = {\n        createdFrom: \"daystart\",\n        createdTo: \"dayend\",\n      };\n      const selectConfig = {\n        wardCode: \"wardCode[0].code\",\n        socialCategory: \"socialCategory.code\",\n      };\n      const textConfig = [\"name\", \"individualId\"];\n      let Individual = Object.keys(requestBody)\n        .map((key) => {\n          if (selectConfig[key]) {\n            requestBody[key] = _.get(requestBody, selectConfig[key], null);\n          } else if (typeof requestBody[key] == \"object\") {\n            requestBody[key] = requestBody[key]?.code;\n          } else if (textConfig?.includes(key)) {\n            requestBody[key] = requestBody[key]?.trim();\n          }\n          return key;\n        })\n        .filter((key) => requestBody[key])\n        .reduce((acc, curr) => {\n          if (pathConfig[curr]) {\n            _.set(acc, pathConfig[curr], requestBody[curr]);\n          } else if (dateConfig[curr] && dateConfig[curr]?.includes(\"day\")) {\n            _.set(acc, curr, Digit.Utils.date.convertDateToEpoch(requestBody[curr], dateConfig[curr]));\n          } else {\n            _.set(acc, curr, requestBody[curr]);\n          }\n          return acc;\n        }, {});\n\n      data.body.Individual = { ...Individual };\n      return data;\n    },\n    additionalCustomizations: (row, key, column, value, t, searchResult) => {\n      //here we can add multiple conditions\n      //like if a cell is link then we return link\n      //first we can identify which column it belongs to then we can return relevant result\n      switch (key) {\n        case \"MASTERS_WAGESEEKER_ID\":\n          return (\n            <span className=\"link\">\n              <Link to={`/${window.contextPath}/employee/masters/view-wageseeker?tenantId=${row?.tenantId}&individualId=${value}`}>\n                {String(value ? (column.translate ? t(column.prefix ? `${column.prefix}${value}` : value) : value) : t(\"ES_COMMON_NA\"))}\n              </Link>\n            </span>\n          );\n\n        case \"MASTERS_SOCIAL_CATEGORY\":\n          return value ? <span style={{ whiteSpace: \"nowrap\" }}>{String(t(`MASTERS_${value}`))}</span> : t(\"ES_COMMON_NA\");\n\n        case \"CORE_COMMON_PROFILE_CITY\":\n          return value ? <span style={{ whiteSpace: \"nowrap\" }}>{String(t(Digit.Utils.locale.getCityLocale(value)))}</span> : t(\"ES_COMMON_NA\");\n\n        case \"MASTERS_WARD\":\n          return value ? (\n            <span style={{ whiteSpace: \"nowrap\" }}>{String(t(Digit.Utils.locale.getMohallaLocale(value, row?.tenantId)))}</span>\n          ) : (\n            t(\"ES_COMMON_NA\")\n          );\n\n        case \"MASTERS_LOCALITY\":\n          return value ? (\n            <span style={{ whiteSpace: \"break-spaces\" }}>{String(t(Digit.Utils.locale.getMohallaLocale(value, row?.tenantId)))}</span>\n          ) : (\n            t(\"ES_COMMON_NA\")\n          );\n        default:\n          return t(\"ES_COMMON_NA\");\n      }\n    },\n    MobileDetailsOnClick: (row, tenantId) => {\n      let link;\n      Object.keys(row).map((key) => {\n        if (key === \"MASTERS_WAGESEEKER_ID\")\n          link = `/${window.contextPath}/employee/masters/view-wageseeker?tenantId=${tenantId}&wageseekerId=${row[key]}`;\n      });\n      return link;\n    },\n    additionalValidations: (type, data, keys) => {\n      if (type === \"date\") {\n        return data[keys.start] && data[keys.end] ? () => new Date(data[keys.start]).getTime() <= new Date(data[keys.end]).getTime() : true;\n      }\n    },\n  },\n  SearchWMSProjectConfig: {\n    preProcess: (data) => {\n      const createdFrom = Digit.Utils.pt.convertDateToEpoch(data.body.inbox.moduleSearchCriteria?.createdFrom, \"daystart\");\n      const createdTo = Digit.Utils.pt.convertDateToEpoch(data.body.inbox.moduleSearchCriteria?.createdTo);\n      const projectType = data.body.inbox.moduleSearchCriteria?.projectType?.code;\n      const boundary = data.body.inbox.moduleSearchCriteria?.boundary?.[0]?.code;\n      data.params = { ...data.params, tenantId: Digit.ULBService.getCurrentTenantId(), includeAncestors: true };\n      let projectName = data.body.inbox.moduleSearchCriteria?.projectName?.trim();\n      let projectNumber = data.body.inbox.moduleSearchCriteria?.projectNumber?.trim();\n      delete data.body.inbox.moduleSearchCriteria?.createdFrom;\n      delete data.body.inbox.moduleSearchCriteria?.ward;\n      delete data.body.inbox.moduleSearchCriteria?.createdTo;\n      data.body.inbox.tenantId = Digit.ULBService.getCurrentTenantId();\n      data.body.inbox.moduleSearchCriteria = {\n        ...data.body.inbox.moduleSearchCriteria,\n        tenantId: Digit.ULBService.getCurrentTenantId(),\n        projectNumber,\n        projectType,\n        projectName,\n        boundary,\n        createdFrom,\n        createdTo,\n      };\n\n      return data;\n    },\n    postProcess: (responseArray) => {\n      const listOfUuids = responseArray?.map((row) => row.auditDetails.createdBy);\n      const uniqueUuids = listOfUuids?.filter(function (item, i, ar) {\n        return ar.indexOf(item) === i;\n      });\n      const tenantId = Digit.ULBService.getCurrentTenantId();\n      const reqCriteria = {\n        url: \"/user/_search\",\n        params: {},\n        body: { tenantId, pageSize: 100, uuid: [...uniqueUuids] },\n        config: {\n          enabled: responseArray?.length > 0 ? true : false,\n          select: (data) => {\n            const usersResponse = data?.user;\n            responseArray?.forEach((row) => {\n              const uuid = row?.auditDetails?.createdBy;\n              const user = usersResponse?.filter((user) => user.uuid === uuid);\n              row.createdBy = user?.[0].name;\n            });\n            return responseArray;\n          },\n        },\n      };\n      const { isLoading: isPostProcessLoading, data: combinedResponse, isFetching: isPostProcessFetching } = Digit.Hooks.useCustomAPIHook(\n        reqCriteria\n      );\n\n      return {\n        isPostProcessFetching,\n        isPostProcessLoading,\n        combinedResponse,\n      };\n    },\n    customValidationCheck: (data) => {\n      //checking both to and from date are present\n      const { createdFrom, createdTo } = data;\n      if (createdTo !== \"\" && createdFrom === \"\") return { warning: true, label: \"ES_COMMON_ENTER_DATE_RANGE\" };\n      else if (createdTo === \"\" && createdFrom !== \"\") return { warning: true, label: \"ES_COMMON_ENTER_DATE_RANGE\" };\n\n      return false;\n    },\n    additionalCustomizations: (row, key, column, value, t, searchResult) => {\n      //here we can add multiple conditions\n      //like if a cell is link then we return link\n      //first we can identify which column it belongs to then we can return relevant result\n      switch (key) {\n        case \"WORKS_PROJECT_ID\":\n          return (\n            <span className=\"link\">\n              <Link to={`/${window.contextPath}/employee/project/project-details?tenantId=${row?.businessObject?.tenantId}&projectNumber=${value}`}>\n                {String(value ? (column.translate ? t(column.prefix ? `${column.prefix}${value}` : value) : value) : t(\"ES_COMMON_NA\"))}\n              </Link>\n            </span>\n          );\n\n        case \"WORKS_PARENT_PROJECT_ID\":\n          return value ? (\n            <span className=\"link\">\n              <Link to={`/${window.contextPath}/employee/project/project-details?tenantId=${row?.businessObject?.tenantId}&projectNumber=${value}`}>\n                {String(value ? value : t(\"ES_COMMON_NA\"))}\n              </Link>\n            </span>\n          ) : (\n            t(\"ES_COMMON_NA\")\n          );\n\n        case \"WORKS_PROJECT_NAME\": {\n          let currentProject = searchResult?.filter((result) => result?.businessObject?.id === row?.businessObject?.id)[0];\n          return (\n            <div class=\"tooltip\">\n              <span class=\"textoverflow\" style={{ \"--max-width\": `${column?.maxLength}ch` }}>\n                {String(t(value))}\n              </span>\n              {/* check condtion - if length greater than 20 */}\n              <span class=\"tooltiptext\" style={{ whiteSpace: \"nowrap\" }}>\n                {currentProject?.businessObject?.description}\n              </span>\n            </div>\n          );\n        }\n\n        case \"PROJECT_ESTIMATED_COST_IN_RS\":\n          return <Amount customStyle={{ textAlign: \"right\" }} value={value} t={t}></Amount>;\n\n        case \"ES_COMMON_LOCATION\": {\n          let currentProject = searchResult?.filter((result) => result?.businessObject.id === row?.businessObject.id)[0].businessObject;\n          const headerLocale = Digit.Utils.locale.getTransformedLocale(row?.businessObject.tenantId);\n          if (currentProject) {\n            let locality = currentProject?.address?.boundary ? t(`${headerLocale}_ADMIN_${currentProject?.address?.boundary}`) : \"\";\n            let ward = currentProject?.additionalDetails?.ward ? t(`${headerLocale}_ADMIN_${currentProject?.additionalDetails?.ward}`) : \"\";\n            let city = currentProject?.address?.city\n              ? t(`TENANT_TENANTS_${Digit.Utils.locale.getTransformedLocale(currentProject?.address?.city)}`)\n              : \"\";\n            return <p>{`${locality ? locality + \", \" : \"\"}${ward ? ward + \", \" : \"\"}${city}`}</p>;\n          }\n          return <p>{\"NA\"}</p>;\n        }\n\n        default:\n          return t(\"ES_COMMON_NA\");\n      }\n    },\n    additionalValidations: (type, data, keys) => {\n      if (type === \"date\") {\n        return data[keys.start] && data[keys.end] ? () => new Date(data[keys.start]).getTime() <= new Date(data[keys.end]).getTime() : true;\n      }\n    },\n    MobileDetailsOnClick: (row, tenantId) => {\n      let link;\n      Object.keys(row).map((key) => {\n        if (key === \"WORKS_PROJECT_ID\")\n          link = `/${window.contextPath}/employee/project/project-details?tenantId=${tenantId}&projectNumber=${row[key]}`;\n      });\n      return link;\n    },\n  }\n};\n","/home/hridya/Downloads/DIGIT-UI-LIBRARIES/react/example/src/index.js",[],"/home/hridya/Downloads/DIGIT-UI-LIBRARIES/react/example/src/App.js",[],"/home/hridya/Downloads/DIGIT-UI-LIBRARIES/react/example/src/UICustomizations.js",["31","32","33"],{"ruleId":"34","severity":1,"message":"35","line":292,"column":34,"nodeType":"36","messageId":"37","endLine":292,"endColumn":36},{"ruleId":"34","severity":1,"message":"35","line":410,"column":34,"nodeType":"36","messageId":"37","endLine":410,"endColumn":36},{"ruleId":"34","severity":1,"message":"35","line":557,"column":34,"nodeType":"36","messageId":"37","endLine":557,"endColumn":36},{"ruleId":"34","severity":1,"message":"35","line":292,"column":34,"nodeType":"36","messageId":"37","endLine":292,"endColumn":36},{"ruleId":"34","severity":1,"message":"35","line":410,"column":34,"nodeType":"36","messageId":"37","endLine":410,"endColumn":36},{"ruleId":"34","severity":1,"message":"35","line":557,"column":34,"nodeType":"36","messageId":"37","endLine":557,"endColumn":36},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]